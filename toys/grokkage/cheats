7/18/2024 09:27:44 AM     D:\dev\code\toys\grokkage\cheats

------------------count bits------------------------------------------------
    int cnt = 0; while (x) { cnt++; x &= (x-1); }
------------------insert sort-----------------------------------------------
    for (c = 1 ; c <= n - 1; c++) => exchg(a,b) {swap a and b}
        d = c;
        while (d > 0 && a[d] < a[d-1]) { exchg(a[d], a[d-1]); d--; }
------------------list------------------------------------------------------
reversal:               while (p)           usage: returns pure headless list
p=list,q,r=null             q = p->next
                            p->next = r
                            r = p
                            p = q
                        return r
------------------max heap---------------------------------------------------
heap[256]; heap[0] = INT_MAX; size=0; ins: loop(a): heap[++size] = a[i]; up(size);
pop: while(size): max = heap[1]; heap[1] = heap[size--]; down(1); print(max);
                           down(k):
up(k):                          last = [k]
    v = [k]                     while k <= size/2:
    while [k/2] <= v:               child = 2k
        [k] = [k/2]                 if child < size && 
        k = k/2                       [child] < [child+1]:
    [k] = v                             child++
                                    if last >= [child] break
                                    [k] = [child]
                                    k = child
                                [k] = last
------------------trie------------------------------------------------------
void insert(ROOT R, KEY)              bool find(ROOT R, KEY)
    foreach k in KEY:                   foreach k in KEY:
        if R->m[k-'a'] == NULL              if R->m[k-'a'] == NULL return FALSE
            R->m[k-'a'] = NEW               R = R->m[k-'a']
        R = R->m[k-'a'] // next R       if R->m[TERM] == NULL return FALSE
    R->m[TERM] = NEW                    return TRUE
-------------------ring-----------------------------------------------------
void put(x)                         int get()           MAX = 2^n
    if (!full())                        x = [tail]
        [head] = x                      tail = (tail+1)%MAX
        head = (head+1)%MAX             size--
        size++;                         return x
int data() return size              int space() return MAX-size
-----------------------tree-------------------------------------------------
void ins(TREE **T, X)               void bfs(TREE)
if (*T == NULL) *T = NEW            PUT(T, Q)
elseif (X < T->x) ins(T->LEFT, X)   while (!empty(Q))
elseif (X > T->x) ins(T->RIGHT, X)      N = GET(); PROCESS(N)
                                        if (N->LEFT)  PUT(N->LEFT, Q)
                                        if (N->RIGHT) PUT(N->RIGHT, Q)
---------------------------search-------------------------------------------
----------------------------------------------------------------------------
endian: uint32 x = 0x11223344L; (H->L), char *p = &x; loop: p[i] addrs increase
bit count: while (x) {  bits+ss+; x &= (x-1); }
----------------------------------------------------------------------------
binsearch
fifo: list & array
hash

